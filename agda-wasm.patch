diff --git a/Agda.cabal b/Agda.cabal
index 9a0863c886..878775326a 100644
--- a/Agda.cabal
+++ b/Agda.cabal
@@ -1,7 +1,7 @@
 cabal-version:   2.4
 name:            Agda
 version:         2.7.0.1
-build-type:      Custom
+build-type:      Simple
 license:         MIT
 license-file:    LICENSE
 copyright:       (c) 2005-2024 The Agda Team.
@@ -194,17 +194,6 @@ flag optimise-heavily
   description:
     Enable some expensive optimisations when compiling Agda.
 
--- Setup
----------------------------------------------------------------------------
-
-custom-setup
-  setup-depends:
-    , base      >= 4.12.0.0 && < 4.21
-    , Cabal     >= 2.4.0.1  && < 3.13
-    , directory >= 1.3.3.0  && < 1.4
-    , filepath  >= 1.4.2.1  && < 1.6
-    , process   >= 1.6.3.0  && < 1.7
-
 -- Common stanzas
 ---------------------------------------------------------------------------
 
@@ -457,6 +446,11 @@ library
     , vector-hashtables    >= 0.1.1.1   && < 0.2
     , zlib                 >= 0.6       && < 0.8
 
+  if arch(wasm32)
+    build-depends:
+      , unix-compat        >= 0.4.3.1   && < 0.8
+      , unix               >= 2.8.0.0   && < 2.9
+
   -- We don't write upper bounds for Alex nor Happy because the
   -- `build-tool-depends` field can not be modified in Hackage.
   build-tool-depends:
@@ -876,10 +870,12 @@ executable agda
   -- been idle for 0.3Â s. This feature turned out to be annoying, so
   -- the idle GC is now by default turned off (-I0).
   ghc-options:
-    -threaded
     -rtsopts
     -with-rtsopts=-I0
 
+  if !arch(wasm32)
+    ghc-options: -threaded
+
 -- agda-mode executable
 ---------------------------------------------------------------------------
 
diff --git a/src/full/Agda/Interaction/AgdaTop.hs b/src/full/Agda/Interaction/AgdaTop.hs
index 4b12c5dba1..ce9fa59c02 100644
--- a/src/full/Agda/Interaction/AgdaTop.hs
+++ b/src/full/Agda/Interaction/AgdaTop.hs
@@ -1,4 +1,5 @@
 {-# OPTIONS_GHC -Wunused-imports #-}
+{-# Language CPP #-}
 
 module Agda.Interaction.AgdaTop
     ( repl
@@ -19,6 +20,11 @@ import Agda.Interaction.Response as R
 import Agda.Interaction.InteractionTop
 import Agda.Interaction.Options
 
+#if defined(wasm32_HOST_ARCH)
+import Agda.Utils.IO                ( catchIO )
+import System.Posix.IO              ( stdInput, setFdOption, FdOption(..) )
+#endif
+
 import Agda.TypeChecking.Monad
 import qualified Agda.TypeChecking.Monad.Benchmark as Bench
 
@@ -27,6 +33,12 @@ import qualified Agda.TypeChecking.Monad.Benchmark as Bench
 -- | 'repl' is a fake ghci interpreter for both the Emacs the JSON frontend
 repl :: InteractionOutputCallback -> String -> TCM () -> TCM ()
 repl callback prompt setup = do
+
+#if defined(wasm32_HOST_ARCH)
+    liftIO $ setFdOption stdInput NonBlockingRead True
+      `catchIO` (\ e -> hPutStrLn stderr $ "Failed to enable nonblocking on stdin: " ++ (show e) ++ "\nThe WASM module might not behave correctly.")
+#endif
+
     liftIO $ do
       hSetBuffering stdout LineBuffering
       hSetBuffering stdin  LineBuffering
diff --git a/src/full/Agda/Interaction/Library.hs b/src/full/Agda/Interaction/Library.hs
index 48117e9397..5e0a5d2222 100644
--- a/src/full/Agda/Interaction/Library.hs
+++ b/src/full/Agda/Interaction/Library.hs
@@ -61,6 +61,7 @@ import qualified Data.Text as T
 import System.Directory
 import System.FilePath
 import System.Environment
+import System.PosixCompat.Files ( FileStatus, getFileStatus, fileID, deviceID )
 import System.IO.Error ( isPermissionError )
 
 import Agda.Interaction.Library.Base
@@ -238,9 +239,15 @@ findProjectConfig' root = do
     --   operating systems L/.. refers to R.
     upPath :: FilePath -> IO (Maybe FilePath)
     upPath root = do
-      up <- canonicalizePath $ root </> ".."
-      if up == root then return Nothing else return $ Just up
+      stat <- getFileStatus root
+      _upPath root (deviceID stat) (fileID stat)
 
+    _upPath root dev ino = do
+      up <- canonicalizePath $ root </> ".."
+      if up == root then return Nothing else do
+        statUp <- getFileStatus up
+        if deviceID statUp == dev && fileID statUp == ino then
+          return Nothing else return $ Just up
 
 -- | Get project root
 
diff --git a/src/full/Agda/TypeChecking/Serialise/Base.hs b/src/full/Agda/TypeChecking/Serialise/Base.hs
index a66359e3e3..22434c211f 100644
--- a/src/full/Agda/TypeChecking/Serialise/Base.hs
+++ b/src/full/Agda/TypeChecking/Serialise/Base.hs
@@ -55,6 +55,8 @@ import Agda.Utils.Monad
 import Agda.Utils.Pointer
 import Agda.Utils.TypeLevel
 
+#include <MachDeps.h>
+
 -- | Constructor tag (maybe omitted) and argument indices.
 data Node = Empty | Cons !Int32 !Node deriving Eq
 
@@ -67,13 +69,25 @@ instance Hashable Node where
     foldedMul (W# x) (W# y) = case timesWord2# x y of (# hi, lo #) -> W# (xor# hi lo)
 
     combine :: Word -> Word -> Word
-    combine x y = foldedMul (xor x y) 11400714819323198549
+    combine x y = foldedMul (xor x y)  factor where
+      -- We use a version of fibonacci hashing, where our multiplier is the
+      -- nearest prime to 2^64/phi or 2^32/phi. See https://stackoverflow.com/q/4113278.
+#if WORD_SIZE_IN_BITS == 64
+      factor = 11400714819323198549
+#else
+      factor = 2654435741
+#endif
 
     go :: Word -> Node -> Word
     go !h Empty       = h
     go  h (Cons n ns) = go (combine h (fromIntegral n)) ns
 
-  hash = hashWithSalt 3032525626373534813
+  hash = hashWithSalt seed where
+#if WORD_SIZE_IN_BITS == 64
+      seed = 3032525626373534813
+#else
+      seed = 1103515245
+#endif
 
 instance B.Binary Node where
 
